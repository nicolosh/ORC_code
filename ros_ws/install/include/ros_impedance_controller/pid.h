// Generated by gencpp from file ros_impedance_controller/pid.msg
// DO NOT EDIT!


#ifndef ROS_IMPEDANCE_CONTROLLER_MESSAGE_PID_H
#define ROS_IMPEDANCE_CONTROLLER_MESSAGE_PID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_impedance_controller
{
template <class ContainerAllocator>
struct pid_
{
  typedef pid_<ContainerAllocator> Type;

  pid_()
    : joint_name()
    , p_value(0.0)
    , i_value(0.0)
    , d_value(0.0)  {
    }
  pid_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , p_value(0.0)
    , i_value(0.0)
    , d_value(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  _joint_name_type joint_name;

   typedef float _p_value_type;
  _p_value_type p_value;

   typedef float _i_value_type;
  _i_value_type i_value;

   typedef float _d_value_type;
  _d_value_type d_value;





  typedef boost::shared_ptr< ::ros_impedance_controller::pid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_impedance_controller::pid_<ContainerAllocator> const> ConstPtr;

}; // struct pid_

typedef ::ros_impedance_controller::pid_<std::allocator<void> > pid;

typedef boost::shared_ptr< ::ros_impedance_controller::pid > pidPtr;
typedef boost::shared_ptr< ::ros_impedance_controller::pid const> pidConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_impedance_controller::pid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_impedance_controller::pid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_impedance_controller::pid_<ContainerAllocator1> & lhs, const ::ros_impedance_controller::pid_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.p_value == rhs.p_value &&
    lhs.i_value == rhs.i_value &&
    lhs.d_value == rhs.d_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_impedance_controller::pid_<ContainerAllocator1> & lhs, const ::ros_impedance_controller::pid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_impedance_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_impedance_controller::pid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_impedance_controller::pid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_impedance_controller::pid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_impedance_controller::pid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_impedance_controller::pid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_impedance_controller::pid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_impedance_controller::pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3368fa16036af8f3c3db35abdf0a2df";
  }

  static const char* value(const ::ros_impedance_controller::pid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3368fa16036af8fULL;
  static const uint64_t static_value2 = 0x3c3db35abdf0a2dfULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_impedance_controller::pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_impedance_controller/pid";
  }

  static const char* value(const ::ros_impedance_controller::pid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_impedance_controller::pid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string joint_name\n"
"float32 p_value\n"
"float32 i_value\n"
"float32 d_value\n"
;
  }

  static const char* value(const ::ros_impedance_controller::pid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_impedance_controller::pid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.p_value);
      stream.next(m.i_value);
      stream.next(m.d_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_impedance_controller::pid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_impedance_controller::pid_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "p_value: ";
    Printer<float>::stream(s, indent + "  ", v.p_value);
    s << indent << "i_value: ";
    Printer<float>::stream(s, indent + "  ", v.i_value);
    s << indent << "d_value: ";
    Printer<float>::stream(s, indent + "  ", v.d_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_IMPEDANCE_CONTROLLER_MESSAGE_PID_H
