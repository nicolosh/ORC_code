// Generated by gencpp from file ros_impedance_controller/get_mapRequest.msg
// DO NOT EDIT!


#ifndef ROS_IMPEDANCE_CONTROLLER_MESSAGE_GET_MAPREQUEST_H
#define ROS_IMPEDANCE_CONTROLLER_MESSAGE_GET_MAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace ros_impedance_controller
{
template <class ContainerAllocator>
struct get_mapRequest_
{
  typedef get_mapRequest_<ContainerAllocator> Type;

  get_mapRequest_()
    : target()
    , width(0.0)
    , length(0.0)
    , resolution_x(0.0)
    , resolution_y(0.0)  {
    }
  get_mapRequest_(const ContainerAllocator& _alloc)
    : target(_alloc)
    , width(0.0)
    , length(0.0)
    , resolution_x(0.0)
    , resolution_y(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _target_type;
  _target_type target;

   typedef double _width_type;
  _width_type width;

   typedef double _length_type;
  _length_type length;

   typedef double _resolution_x_type;
  _resolution_x_type resolution_x;

   typedef double _resolution_y_type;
  _resolution_y_type resolution_y;





  typedef boost::shared_ptr< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct get_mapRequest_

typedef ::ros_impedance_controller::get_mapRequest_<std::allocator<void> > get_mapRequest;

typedef boost::shared_ptr< ::ros_impedance_controller::get_mapRequest > get_mapRequestPtr;
typedef boost::shared_ptr< ::ros_impedance_controller::get_mapRequest const> get_mapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator1> & lhs, const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target == rhs.target &&
    lhs.width == rhs.width &&
    lhs.length == rhs.length &&
    lhs.resolution_x == rhs.resolution_x &&
    lhs.resolution_y == rhs.resolution_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator1> & lhs, const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_impedance_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85bcadc0901be97a8de14ebd0011dd79";
  }

  static const char* value(const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85bcadc0901be97aULL;
  static const uint64_t static_value2 = 0x8de14ebd0011dd79ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_impedance_controller/get_mapRequest";
  }

  static const char* value(const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point target\n"
"float64 width\n"
"float64 length\n"
"float64 resolution_x\n"
"float64 resolution_y\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.resolution_x);
      stream.next(m.resolution_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct get_mapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_impedance_controller::get_mapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_impedance_controller::get_mapRequest_<ContainerAllocator>& v)
  {
    s << indent << "target: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "resolution_x: ";
    Printer<double>::stream(s, indent + "  ", v.resolution_x);
    s << indent << "resolution_y: ";
    Printer<double>::stream(s, indent + "  ", v.resolution_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_IMPEDANCE_CONTROLLER_MESSAGE_GET_MAPREQUEST_H
