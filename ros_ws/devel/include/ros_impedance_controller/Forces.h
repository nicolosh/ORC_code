// Generated by gencpp from file ros_impedance_controller/Forces.msg
// DO NOT EDIT!


#ifndef ROS_IMPEDANCE_CONTROLLER_MESSAGE_FORCES_H
#define ROS_IMPEDANCE_CONTROLLER_MESSAGE_FORCES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace ros_impedance_controller
{
template <class ContainerAllocator>
struct Forces_
{
  typedef Forces_<ContainerAllocator> Type;

  Forces_()
    : FL()
    , FR()
    , HL()
    , HR()  {
    }
  Forces_(const ContainerAllocator& _alloc)
    : FL(_alloc)
    , FR(_alloc)
    , HL(_alloc)
    , HR(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _FL_type;
  _FL_type FL;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _FR_type;
  _FR_type FR;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _HL_type;
  _HL_type HL;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _HR_type;
  _HR_type HR;





  typedef boost::shared_ptr< ::ros_impedance_controller::Forces_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_impedance_controller::Forces_<ContainerAllocator> const> ConstPtr;

}; // struct Forces_

typedef ::ros_impedance_controller::Forces_<std::allocator<void> > Forces;

typedef boost::shared_ptr< ::ros_impedance_controller::Forces > ForcesPtr;
typedef boost::shared_ptr< ::ros_impedance_controller::Forces const> ForcesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_impedance_controller::Forces_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_impedance_controller::Forces_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_impedance_controller::Forces_<ContainerAllocator1> & lhs, const ::ros_impedance_controller::Forces_<ContainerAllocator2> & rhs)
{
  return lhs.FL == rhs.FL &&
    lhs.FR == rhs.FR &&
    lhs.HL == rhs.HL &&
    lhs.HR == rhs.HR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_impedance_controller::Forces_<ContainerAllocator1> & lhs, const ::ros_impedance_controller::Forces_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_impedance_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_impedance_controller::Forces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_impedance_controller::Forces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_impedance_controller::Forces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_impedance_controller::Forces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_impedance_controller::Forces_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_impedance_controller::Forces_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_impedance_controller::Forces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "169e73725854833f10800dd7f11156c8";
  }

  static const char* value(const ::ros_impedance_controller::Forces_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x169e73725854833fULL;
  static const uint64_t static_value2 = 0x10800dd7f11156c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_impedance_controller::Forces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_impedance_controller/Forces";
  }

  static const char* value(const ::ros_impedance_controller::Forces_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_impedance_controller::Forces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point FL\n"
"geometry_msgs/Point FR\n"
"geometry_msgs/Point HL\n"
"geometry_msgs/Point HR\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ros_impedance_controller::Forces_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_impedance_controller::Forces_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.FL);
      stream.next(m.FR);
      stream.next(m.HL);
      stream.next(m.HR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Forces_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_impedance_controller::Forces_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_impedance_controller::Forces_<ContainerAllocator>& v)
  {
    s << indent << "FL: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.FL);
    s << indent << "FR: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.FR);
    s << indent << "HL: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.HL);
    s << indent << "HR: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.HR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_IMPEDANCE_CONTROLLER_MESSAGE_FORCES_H
