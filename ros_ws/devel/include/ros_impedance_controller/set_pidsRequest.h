// Generated by gencpp from file ros_impedance_controller/set_pidsRequest.msg
// DO NOT EDIT!


#ifndef ROS_IMPEDANCE_CONTROLLER_MESSAGE_SET_PIDSREQUEST_H
#define ROS_IMPEDANCE_CONTROLLER_MESSAGE_SET_PIDSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_impedance_controller/pid.h>

namespace ros_impedance_controller
{
template <class ContainerAllocator>
struct set_pidsRequest_
{
  typedef set_pidsRequest_<ContainerAllocator> Type;

  set_pidsRequest_()
    : data()  {
    }
  set_pidsRequest_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ros_impedance_controller::pid_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ros_impedance_controller::pid_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct set_pidsRequest_

typedef ::ros_impedance_controller::set_pidsRequest_<std::allocator<void> > set_pidsRequest;

typedef boost::shared_ptr< ::ros_impedance_controller::set_pidsRequest > set_pidsRequestPtr;
typedef boost::shared_ptr< ::ros_impedance_controller::set_pidsRequest const> set_pidsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator1> & lhs, const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator1> & lhs, const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_impedance_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57e1d8620111737d7058aca47a2ecb19";
  }

  static const char* value(const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57e1d8620111737dULL;
  static const uint64_t static_value2 = 0x7058aca47a2ecb19ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_impedance_controller/set_pidsRequest";
  }

  static const char* value(const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pid[] data\n"
"\n"
"================================================================================\n"
"MSG: ros_impedance_controller/pid\n"
"string joint_name\n"
"float32 p_value\n"
"float32 i_value\n"
"float32 d_value\n"
;
  }

  static const char* value(const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct set_pidsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_impedance_controller::set_pidsRequest_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ros_impedance_controller::pid_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_IMPEDANCE_CONTROLLER_MESSAGE_SET_PIDSREQUEST_H
